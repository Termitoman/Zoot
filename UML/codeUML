@startuml
class zoot.arbre.instructions.Conditionnelle {
- Expression exp
- ArbreAbstrait blocAlors
- ArbreAbstrait blocSinon
- int numUnique
+ void verifier()
+ String toMIPS(String)
+ boolean contientUnRetourne()
}
class zoot.arbre.instructions.Retourne {
- Expression exp
+ void verifier()
+ String toMIPS(String)
+ boolean contientUnRetourne()
}
class zoot.gestionErreurs.StockageErreurs {
- ArrayList<Erreur> listeErreurs
- {static} StockageErreurs instance
+ {static} StockageErreurs getInstance()
+ void ajouter(Erreur)
+ Erreur getErreurI(int)
+ int getNbErreurs()
+ ArrayList<Erreur> getListeErreurs()
}
class zoot.exceptions.DoubleDeclarationException {
}
class zoot.arbre.expressions.operateurs.unaires.Non {
- Expression exp
- int numUnique
+ void verifier()
+ String toMIPS(String)
+ String getType()
+ int getNbErchov()
+ String toString()
}
class zoot.arbre.expressions.operateurs.binaires.Ou {
+ String toMIPS(String)
+ String toString()
}
class zoot.gestionErreurs.Erreur {
- String message
- int numLigne
- int numCarac
+ String getMessage()
+ void setMessage(String)
+ int getNumLigne()
+ void setNumLigne(int)
+ int getNumCarac()
+ void setNumCarac(int)
}
class zoot.arbre.GenerateurNum {
- int nb
- {static} GenerateurNum instance
+ {static} GenerateurNum getInstance()
+ int genererNombre()
}
class zoot.arbre.expressions.ConstanteEntiere {
+ String toMIPS(String)
+ String getType()
}
class zoot.arbre.BlocDInstructions {
# ArrayList<ArbreAbstrait> programme
+ void ajouter(ArbreAbstrait)
+ void verifier()
+ String toMIPS(String)
+ String toString()
+ ArrayList<ArbreAbstrait> getProgramme()
}
class zoot.arbre.instructions.Ecrire {
- Expression exp
- int numUnique
+ void verifier()
+ String toMIPS(String)
}
class zoot.tableDesSymboles.TDS {
- ArrayList<HashMap<Entree,Symbole>> tableDesSymboles
- int noBlocActuel
- int noBlocPrec
- {static} TDS instance
+ {static} TDS getInstance()
+ void ajouter(Entree,Symbole)
+ Symbole identifier(Entree)
+ int getTailleZoneVariables()
+ int getNoBlocActuel()
+ void entreeBloc()
+ void sortieBloc()
+ void entreeBlocVerif()
+ void entreeBlocPrec()
+ void entreeBlocI(int)
}
class zoot.tableDesSymboles.Symbole {
- String type
- int deplacement
+ String getType()
+ void setType(String)
+ int getDeplacement()
+ void setDeplacement(int)
}
abstract class zoot.arbre.expressions.operateurs.binaires.BinaireBooleen {
# Expression eGauche
# Expression eDroite
# int numUnique
+ void verifier()
+ String toMIPS(String)
+ String getType()
+ int getNbErchov()
+ String[] supprRegistreInutile(int,String)
}
class zoot.arbre.expressions.Idf {
- String nom
- int depl
- String type
+ void verifier()
+ String toMIPS(String)
+ String getType()
+ int getDepl()
+ String toString()
}
abstract class zoot.arbre.expressions.operateurs.binaires.BinaireMixte {
# Expression eGauche
# Expression eDroite
# int numUnique
+ void verifier()
+ String getType()
+ int getNbErchov()
+ String[] supprRegistreInutile(int,String)
}
class zoot.arbre.instructions.Affect {
# Idf idf
# Expression exp
+ void verifier()
+ String toMIPS(String)
}
class zoot.analyse.AnalyseurSyntaxique {
# {static} short[][] _production_table
# {static} short[][] _action_table
# {static} short[][] _reduce_table
# CUP$AnalyseurSyntaxique$actions action_obj
+ short[][] production_table()
+ short[][] action_table()
+ short[][] reduce_table()
# void init_actions()
+ java_cup.runtime.Symbol do_action(int,java_cup.runtime.lr_parser,java.util.Stack,int)
+ int start_state()
+ int start_production()
+ int EOF_sym()
+ int error_sym()
+ void report_error(String,Object)
+ void report_fatal_error(String,Object)
}
class zoot.analyse.CUP$AnalyseurSyntaxique$actions {
- AnalyseurSyntaxique parser
+ java_cup.runtime.Symbol CUP$AnalyseurSyntaxique$do_action(int,java_cup.runtime.lr_parser,java.util.Stack,int)
}
class zoot.exceptions.AnalyseLexicaleException {
}
class zoot.arbre.fonctions.GestionnaireFonctions {
- ArrayList<Fonction> fonctions
- boolean fonctionsSontTraitees
- {static} GestionnaireFonctions instance
+ {static} GestionnaireFonctions getInstance()
+ boolean isFonctionsSontTraitees()
+ void setFonctionsSontTraitees(boolean)
+ void ajouter(Fonction)
+ String toMipsFonctions()
+ void verifier()
+ ArrayList<Fonction> getFonctions()
}
abstract class zoot.arbre.ArbreAbstrait {
# int noLigne
+ int getNoLigne()
+ {abstract}void verifier()
+ {abstract}String toMIPS(String)
+ boolean contientUnRetourne()
}
abstract class zoot.arbre.expressions.operateurs.binaires.BinaireEntier {
# Expression eGauche
# Expression eDroite
+ void verifier()
+ String getType()
+ int getNbErchov()
+ String[] supprRegistreInutile(int,String)
}
class zoot.arbre.expressions.operateurs.binaires.Inferieur {
- Expression eGauche
- Expression eDroite
- int numUnique
+ void verifier()
+ String toMIPS(String)
+ String getType()
+ int getNbErchov()
+ String[] supprRegistreInutile(int,String)
+ String toString()
}
class zoot.arbre.expressions.AppelFonction {
- String idf
- String type
- ArrayList<Expression> params
- Fonction fonctionAppelee
+ void verifier()
+ String toMIPS(String)
+ String getType()
+ String getTypeParam()
+ String toString()
- String affichageParametres()
}
abstract class zoot.arbre.instructions.Instruction {
}
class zoot.arbre.expressions.operateurs.unaires.Parenthese {
- Expression exp
+ void verifier()
+ String toMIPS(String)
+ String getType()
+ String toString()
+ int getNbErchov()
}
class zoot.arbre.instructions.Boucle {
- Expression exp
- ArbreAbstrait bloc
- int numUnique
+ void verifier()
+ String toMIPS(String)
+ boolean contientUnRetourne()
}
class zoot.tableDesSymboles.Entree {
- String idf
- String type
- ArrayList<String> typeParam
+ String getIdf()
+ String getType()
+ ArrayList<String> getTypeParam()
}
class zoot.analyse.CodesLexicaux {
+ {static} int RETOURNE
+ {static} int IDF
+ {static} int CSTBOOLEENNE
+ {static} int JUSQUA
+ {static} int EGAL
+ {static} int PARFERMANTE
+ {static} int CSTENTIERE
+ {static} int OU
+ {static} int PLUS
+ {static} int INFERIEUR
+ {static} int ECRIRE
+ {static} int ALORS
+ {static} int DIFFERENT
+ {static} int FONCTIONS
+ {static} int DOUBLEEGAL
+ {static} int VIRGULE
+ {static} int REPETER
+ {static} int NON
+ {static} int MOINS
+ {static} int POINTVIRGULE
+ {static} int SINON
+ {static} int VARIABLES
+ {static} int FINREPETER
+ {static} int ENTIER
+ {static} int EOF
+ {static} int MULT
+ {static} int PAROUVRANTE
+ {static} int SI
+ {static} int ET
+ {static} int error
+ {static} int BOOLEEN
+ {static} int DEBUT
+ {static} int FINSI
+ {static} int FIN
}
class zoot.arbre.expressions.operateurs.binaires.DoubleEgal {
+ String toMIPS(String)
+ String toString()
}
class zoot.exceptions.AnalyseSyntaxiqueException {
}
class zoot.arbre.expressions.operateurs.unaires.Moins {
- Expression exp
+ void verifier()
+ String toMIPS(String)
+ String getType()
+ int getNbErchov()
+ String toString()
}
class zoot.Zoot {
+ {static} void main(String[])
}
class zoot.analyse.AnalyseurLexical {
+ {static} int YYEOF
- {static} int ZZ_BUFFERSIZE
+ {static} int YYINITIAL
- {static} int[] ZZ_LEXSTATE
- {static} String ZZ_CMAP_PACKED
- {static} char[] ZZ_CMAP
- {static} int[] ZZ_ACTION
- {static} String ZZ_ACTION_PACKED_0
- {static} int[] ZZ_ROWMAP
- {static} String ZZ_ROWMAP_PACKED_0
- {static} int[] ZZ_TRANS
- {static} String ZZ_TRANS_PACKED_0
- {static} int ZZ_UNKNOWN_ERROR
- {static} int ZZ_NO_MATCH
- {static} int ZZ_PUSHBACK_2BIG
- {static} String[] ZZ_ERROR_MSG
- {static} int[] ZZ_ATTRIBUTE
- {static} String ZZ_ATTRIBUTE_PACKED_0
- java.io.Reader zzReader
- int zzState
- int zzLexicalState
- char[] zzBuffer
- int zzMarkedPos
- int zzCurrentPos
- int zzStartRead
- int zzEndRead
- int yyline
- int yychar
- int yycolumn
- boolean zzAtBOL
- boolean zzAtEOF
- boolean zzEOFDone
- int zzFinalHighSurrogate
- StringBuilder chaine
- {static} int[] zzUnpackAction()
- {static} int zzUnpackAction(String,int,int[])
- {static} int[] zzUnpackRowMap()
- {static} int zzUnpackRowMap(String,int,int[])
- {static} int[] zzUnpackTrans()
- {static} int zzUnpackTrans(String,int,int[])
- {static} int[] zzUnpackAttribute()
- {static} int zzUnpackAttribute(String,int,int[])
- Symbol symbol(int)
- Symbol symbol(int,Object)
- {static} char[] zzUnpackCMap(String)
- boolean zzRefill()
+ void yyclose()
+ void yyreset(java.io.Reader)
+ int yystate()
+ void yybegin(int)
+ String yytext()
+ char yycharat(int)
+ int yylength()
- void zzScanError(int)
+ void yypushback(int)
- void zzDoEOF()
+ Symbol next_token()
}
class zoot.arbre.fonctions.Fonction {
- String idf
- ArbreAbstrait bloc
- ArrayList<String> typeParams
- ArrayList<String> nomParams
- int noBlocFonc
+ void verifier()
+ String toMIPS(String)
+ String getIdf()
+ int getNbParams()
+ ArrayList<String> getTypeParams()
+ ArrayList<String> getNomParams()
+ int getNoBlocFonc()
}
class zoot.arbre.expressions.operateurs.binaires.Different {
+ String toMIPS(String)
+ String toString()
}
class zoot.arbre.expressions.operateurs.binaires.Et {
+ String toMIPS(String)
+ String toString()
}
abstract class zoot.exceptions.AnalyseException {
}
class zoot.arbre.expressions.operateurs.binaires.Multiplication {
+ String toMIPS(String)
+ String toString()
}
class zoot.exceptions.EntreeNonDeclareeException {
}
abstract class zoot.arbre.expressions.Expression {
+ {abstract}String getType()
+ String getTypeParam()
+ int getNbErchov()
}
class zoot.arbre.expressions.operateurs.binaires.Addition {
+ String toMIPS(String)
+ String toString()
}
class zoot.exceptions.AnalyseLexicaleSemantique {
}
abstract class zoot.arbre.expressions.Constante {
# String cste
+ void verifier()
+ String toString()
}
class zoot.arbre.expressions.ConstanteBooleenne {
+ String toMIPS(String)
+ String getType()
}


zoot.arbre.instructions.Instruction <|-- zoot.arbre.instructions.Conditionnelle
zoot.arbre.instructions.Instruction <|-- zoot.arbre.instructions.Retourne
zoot.exceptions.AnalyseLexicaleSemantique <|-- zoot.exceptions.DoubleDeclarationException
zoot.arbre.expressions.Expression <|-- zoot.arbre.expressions.operateurs.unaires.Non
zoot.arbre.expressions.operateurs.binaires.BinaireBooleen <|-- zoot.arbre.expressions.operateurs.binaires.Ou
zoot.arbre.expressions.Constante <|-- zoot.arbre.expressions.ConstanteEntiere
zoot.arbre.ArbreAbstrait <|-- zoot.arbre.BlocDInstructions
zoot.arbre.instructions.Instruction <|-- zoot.arbre.instructions.Ecrire
zoot.arbre.expressions.Expression <|-- zoot.arbre.expressions.operateurs.binaires.BinaireBooleen
zoot.arbre.expressions.Expression <|-- zoot.arbre.expressions.Idf
zoot.arbre.expressions.Expression <|-- zoot.arbre.expressions.operateurs.binaires.BinaireMixte
zoot.arbre.instructions.Instruction <|-- zoot.arbre.instructions.Affect
zoot.analyse.lr_parser <|-- zoot.analyse.AnalyseurSyntaxique
zoot.exceptions.AnalyseException <|-- zoot.exceptions.AnalyseLexicaleException
zoot.arbre.expressions.Expression <|-- zoot.arbre.expressions.operateurs.binaires.BinaireEntier
zoot.arbre.expressions.Expression <|-- zoot.arbre.expressions.operateurs.binaires.Inferieur
zoot.arbre.expressions.Expression <|-- zoot.arbre.expressions.AppelFonction
zoot.arbre.ArbreAbstrait <|-- zoot.arbre.instructions.Instruction
zoot.arbre.expressions.Expression <|-- zoot.arbre.expressions.operateurs.unaires.Parenthese
zoot.arbre.instructions.Instruction <|-- zoot.arbre.instructions.Boucle
zoot.arbre.expressions.operateurs.binaires.BinaireMixte <|-- zoot.arbre.expressions.operateurs.binaires.DoubleEgal
zoot.exceptions.AnalyseException <|-- zoot.exceptions.AnalyseSyntaxiqueException
zoot.arbre.expressions.Expression <|-- zoot.arbre.expressions.operateurs.unaires.Moins
zoot.analyse.Scanner <|.. zoot.analyse.AnalyseurLexical
zoot.arbre.ArbreAbstrait <|-- zoot.arbre.fonctions.Fonction
zoot.arbre.expressions.operateurs.binaires.BinaireMixte <|-- zoot.arbre.expressions.operateurs.binaires.Different
zoot.arbre.expressions.operateurs.binaires.BinaireBooleen <|-- zoot.arbre.expressions.operateurs.binaires.Et
zoot.exceptions.RuntimeException <|-- zoot.exceptions.AnalyseException
zoot.arbre.expressions.operateurs.binaires.BinaireEntier <|-- zoot.arbre.expressions.operateurs.binaires.Multiplication
zoot.exceptions.AnalyseLexicaleSemantique <|-- zoot.exceptions.EntreeNonDeclareeException
zoot.arbre.ArbreAbstrait <|-- zoot.arbre.expressions.Expression
zoot.arbre.expressions.operateurs.binaires.BinaireEntier <|-- zoot.arbre.expressions.operateurs.binaires.Addition
zoot.exceptions.AnalyseException <|-- zoot.exceptions.AnalyseLexicaleSemantique
zoot.arbre.expressions.Expression <|-- zoot.arbre.expressions.Constante
zoot.arbre.expressions.Constante <|-- zoot.arbre.expressions.ConstanteBooleenne
@enduml